"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _core = require("@emotion/core");

var _analyticsNext = require("@atlaskit/analytics-next");

var _close = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/close"));

var _motion = require("@atlaskit/motion");

var _components = _interopRequireDefault(require("@atlaskit/theme/components"));

var _theme = require("../../../theme");

var _version = require("../../../version.json");

var _base = _interopRequireDefault(require("../shared/base"));

var _before = _interopRequireDefault(require("../shared/before"));

var _content = _interopRequireDefault(require("../shared/content"));

var _styles = require("../shared/styles");

var _utils = require("../shared/utils");

var _styles2 = require("./styles");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultBeforeRemoveAction = function defaultBeforeRemoveAction() {
  return true;
};

var noop = function noop() {};

var TagStatus;

(function (TagStatus) {
  TagStatus["Showing"] = "showing";
  TagStatus["Removing"] = "removing";
  TagStatus["Removed"] = "removed";
})(TagStatus || (TagStatus = {}));

var InnerRemovableTag = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _useState = (0, _react.useState)(TagStatus.Showing),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      status = _useState2[0],
      setStatus = _useState2[1];

  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      _props$elemBefore = props.elemBefore,
      elemBefore = _props$elemBefore === void 0 ? null : _props$elemBefore,
      _props$isRemovable = props.isRemovable,
      isRemovable = _props$isRemovable === void 0 ? true : _props$isRemovable,
      _props$text = props.text,
      text = _props$text === void 0 ? '' : _props$text,
      _props$color = props.color,
      color = _props$color === void 0 ? 'standard' : _props$color,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'light' : _props$mode,
      href = props.href,
      removeButtonLabel = props.removeButtonLabel,
      testId = props.testId,
      _props$onBeforeRemove = props.onBeforeRemoveAction,
      onBeforeRemoveAction = _props$onBeforeRemove === void 0 ? defaultBeforeRemoveAction : _props$onBeforeRemove,
      _props$onAfterRemoveA = props.onAfterRemoveAction,
      onAfterRemoveAction = _props$onAfterRemoveA === void 0 ? noop : _props$onAfterRemoveA;
  var isRounded = appearance === 'rounded';
  var isLink = Boolean(href);
  var onAfterRemoveActionWithAnalytics = (0, _analyticsNext.useCallbackWithAnalytics)(onAfterRemoveAction, {
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName: _version.name,
      packageVersion: _version.version
    }
  }, 'atlaskit');
  var handleRemoveComplete = (0, _react.useCallback)(function () {
    onAfterRemoveActionWithAnalytics(text);
    setStatus(TagStatus.Removed);
  }, [onAfterRemoveActionWithAnalytics, text]);
  var handleRemoveRequest = (0, _react.useCallback)(function () {
    if (onBeforeRemoveAction && onBeforeRemoveAction()) {
      handleRemoveComplete();
    }
  }, [handleRemoveComplete, onBeforeRemoveAction]);
  var onKeyPress = (0, _react.useCallback)(function (e) {
    var spacebarOrEnter = e.key === ' ' || e.key === 'Enter';

    if (spacebarOrEnter) {
      e.stopPropagation();
      handleRemoveRequest();
    }
  }, [handleRemoveRequest]);
  var removingTag = (0, _react.useCallback)(function () {
    return setStatus(TagStatus.Removing);
  }, []);
  var showingTag = (0, _react.useCallback)(function () {
    return setStatus(TagStatus.Showing);
  }, []);

  var _useMemo = (0, _react.useMemo)(function () {
    return (0, _theme.getThemeColors)(color, mode);
  }, [color, mode]),
      chromeColors = _useMemo.chromeColors,
      chromeLinkColors = _useMemo.chromeLinkColors,
      buttonColors = _useMemo.buttonColors,
      linkHoverColor = _useMemo.linkHoverColor;

  var chromeContainerForLinkStyles = [(0, _styles.chromeLinkStyles)(chromeLinkColors), isRounded ? _styles.roundedBorderStyles : undefined];
  var chromeContainerStyles = [(0, _styles.chromeStyles)(_objectSpread({}, chromeColors)), isRounded ? _styles.roundedBorderStyles : undefined];
  var removeButton = isRemovable ? (0, _core.jsx)("button", {
    css: [(0, _styles2.removeButtonStyles)(_objectSpread({}, buttonColors)), isRounded ? _styles.roundedBorderStyles : undefined],
    tabIndex: 0,
    "aria-label": removeButtonLabel,
    onClick: handleRemoveRequest,
    onFocus: removingTag,
    onBlur: showingTag,
    onKeyPress: onKeyPress,
    type: "button",
    "data-testid": "close-button-".concat(testId)
  }, (0, _core.jsx)(_close.default, {
    label: "close tag",
    size: "small"
  })) : undefined;
  var tagCss = [].concat(chromeContainerStyles, [isLink ? chromeContainerForLinkStyles : undefined]);
  var content = (0, _core.jsx)(_content.default, (0, _extends2.default)({}, props, {
    isRemovable: isRemovable,
    isLink: isLink,
    isRounded: isRounded,
    linkHoverColor: linkHoverColor
  }));
  return (0, _core.jsx)(_motion.ExitingPersistence, null, !(status === TagStatus.Removed) && (0, _core.jsx)(_motion.ShrinkOut, null, function (motion) {
    return (0, _core.jsx)(_base.default, {
      ref: (0, _utils.mergeRefs)(motion.ref, ref),
      testId: testId,
      tagCss: tagCss,
      "data-removable": true,
      "data-removing": status === TagStatus.Removing,
      role: isLink ? 'link' : undefined,
      before: (0, _core.jsx)(_before.default, {
        isRounded: isRounded,
        elemBefore: elemBefore
      }),
      contentElement: content,
      after: removeButton
    });
  }));
});
var RemovableTag = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  return (0, _core.jsx)(_components.default.Consumer, null, function (tokens) {
    return (0, _core.jsx)(InnerRemovableTag, (0, _extends2.default)({}, props, {
      mode: tokens.mode,
      ref: ref
    }));
  });
}));
var _default = RemovableTag;
exports.default = _default;