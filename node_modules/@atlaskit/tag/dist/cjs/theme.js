"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemeColors = void 0;

var colors = _interopRequireWildcard(require("@atlaskit/theme/colors"));

var textColors = {
  standard: {
    light: colors.N700,
    dark: colors.DN600
  },
  green: {
    light: colors.N800,
    dark: colors.N800
  },
  purple: {
    light: colors.N800,
    dark: colors.N800
  },
  red: {
    light: colors.N800,
    dark: colors.N800
  },
  yellow: {
    light: colors.N800,
    dark: colors.N800
  },
  grey: {
    light: colors.N0,
    dark: colors.N0
  },
  teal: {
    light: colors.N800,
    dark: colors.N800
  },
  blue: {
    light: colors.N800,
    dark: colors.N800
  },
  tealLight: {
    light: colors.N500,
    dark: colors.N500
  },
  blueLight: {
    light: colors.B500,
    dark: colors.B500
  },
  greenLight: {
    light: colors.G500,
    dark: colors.G500
  },
  purpleLight: {
    light: colors.P500,
    dark: colors.P500
  },
  redLight: {
    light: colors.N500,
    dark: colors.N500
  },
  yellowLight: {
    light: colors.N500,
    dark: colors.N500
  },
  greyLight: {
    light: colors.N500,
    dark: colors.N500
  }
};
var backgroundColors = {
  standard: {
    light: colors.N20,
    dark: colors.DN100A
  },
  green: {
    light: colors.G200,
    dark: colors.G200
  },
  purple: {
    light: colors.P100,
    dark: colors.P100
  },
  red: {
    light: colors.R100,
    dark: colors.R100
  },
  yellow: {
    light: colors.Y200,
    dark: colors.Y200
  },
  grey: {
    light: colors.N500,
    dark: colors.N500
  },
  teal: {
    light: colors.T200,
    dark: colors.T200
  },
  blue: {
    light: colors.B100,
    dark: colors.B100
  },
  tealLight: {
    light: colors.T100,
    dark: colors.T100
  },
  blueLight: {
    light: colors.B75,
    dark: colors.B75
  },
  greenLight: {
    light: colors.G100,
    dark: colors.G100
  },
  purpleLight: {
    light: colors.P75,
    dark: colors.P75
  },
  redLight: {
    light: colors.R75,
    dark: colors.R75
  },
  yellowLight: {
    light: colors.Y100,
    dark: colors.Y100
  },
  greyLight: {
    light: colors.N30,
    dark: colors.N30
  }
};
var linkBackgroundColorHover = {
  standard: {
    light: colors.N30,
    dark: colors.DN60
  },
  green: {
    light: colors.G100,
    dark: colors.DN60
  },
  purple: {
    light: colors.P75,
    dark: colors.DN60
  },
  red: {
    light: colors.R75,
    dark: colors.DN60
  },
  yellow: {
    light: colors.Y100,
    dark: colors.DN60
  },
  grey: {
    light: colors.N50,
    dark: colors.DN60
  },
  teal: {
    light: colors.T100,
    dark: colors.DN60
  },
  blue: {
    light: colors.B75,
    dark: colors.DN60
  },
  tealLight: {
    light: colors.T75,
    dark: colors.DN60
  },
  blueLight: {
    light: colors.B50,
    dark: colors.DN60
  },
  greenLight: {
    light: colors.G75,
    dark: colors.DN60
  },
  purpleLight: {
    light: colors.P50,
    dark: colors.DN60
  },
  redLight: {
    light: colors.R50,
    dark: colors.DN60
  },
  yellowLight: {
    light: colors.Y75,
    dark: colors.DN60
  },
  greyLight: {
    light: colors.N30,
    dark: colors.DN60
  }
};
var focusRingColorObj = {
  light: colors.B100,
  dark: colors.B75
};
var hoverBoxShadowColorObj = {
  light: colors.R300,
  dark: colors.R200
};
var focusBoxShadowColorObj = {
  light: colors.B100,
  dark: colors.B75
};
var linkHoverColorObj = {
  light: colors.B300,
  dark: colors.B200
};

var getTextColor = function getTextColor(tagColor, mode) {
  var color = tagColor ? tagColor : 'standard';
  return textColors[color][mode];
};

var getLinkBackgroundColorHover = function getLinkBackgroundColorHover(tagColor, mode) {
  var color = tagColor ? tagColor : 'standard';
  return linkBackgroundColorHover[color][mode];
};

var getBackgroundColor = function getBackgroundColor(tagColor, mode) {
  var color = tagColor ? tagColor : 'standard';
  return backgroundColors[color][mode];
};

var getTextColorForRemoval = function getTextColorForRemoval(tagColor, mode) {
  return {
    light: colors.R500,
    dark: colors.DN30
  }[mode];
};

var getBackgroundColorForRemoval = function getBackgroundColorForRemoval(tagColor, mode) {
  return {
    light: colors.R50,
    dark: colors.R100
  }[mode];
};

var getChromeColors = function getChromeColors(color, mode) {
  var backgroundColor = getBackgroundColor(color, mode);
  var backgroundColorHover = getBackgroundColorForRemoval(color, mode);
  var textColor = getTextColor(color, mode);
  var textColorHover = getTextColorForRemoval(color, mode);
  return {
    backgroundColor: backgroundColor,
    backgroundColorHover: backgroundColorHover,
    textColor: textColor,
    textColorHover: textColorHover
  };
};

var getChromeLinkColors = function getChromeLinkColors(color, mode) {
  var hoverBackgroundColorRemoval = getBackgroundColorForRemoval(color, mode);
  var hoverTextColorRemoval = getTextColorForRemoval(color, mode);
  var hoverBackgroundColor = getLinkBackgroundColorHover(color, mode);
  var hoverTextColor = linkHoverColorObj[mode];
  var focusRingColor = focusRingColorObj[mode];
  return {
    hoverBackgroundColor: hoverBackgroundColor,
    hoverTextColor: hoverTextColor,
    hoverBackgroundColorRemoval: hoverBackgroundColorRemoval,
    hoverTextColorRemoval: hoverTextColorRemoval,
    focusRingColor: focusRingColor
  };
};

var getButtonColors = function getButtonColors(color, mode) {
  var backgroundColor = getBackgroundColor(color, mode);
  var backgroundColorHover = getBackgroundColorForRemoval(color, mode);
  var focusBoxShadowColor = focusBoxShadowColorObj[mode];
  var hoverBoxShadowColor = hoverBoxShadowColorObj[mode];
  return {
    backgroundColor: backgroundColor,
    backgroundColorHover: backgroundColorHover,
    focusBoxShadowColor: focusBoxShadowColor,
    hoverBoxShadowColor: hoverBoxShadowColor
  };
};

var getThemeColors = function getThemeColors(color, mode) {
  var chromeColors = getChromeColors(color, mode);
  var chromeLinkColors = getChromeLinkColors(color, mode);
  var buttonColors = getButtonColors(color, mode);
  var linkHoverColor = linkHoverColorObj[mode];
  return {
    chromeColors: chromeColors,
    chromeLinkColors: chromeLinkColors,
    buttonColors: buttonColors,
    linkHoverColor: linkHoverColor
  };
};

exports.getThemeColors = getThemeColors;