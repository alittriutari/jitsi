import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React from 'react';
import { findByText, fireEvent, getByTestId } from '@testing-library/dom';
import RemovableTag, { SimpleTag } from '../../src';
export default {
  title: 'Examples'
};
export var simpleTag = function simpleTag() {
  return /*#__PURE__*/React.createElement(SimpleTag, {
    text: "simple tag"
  });
};
export var removableTag = function removableTag() {
  return /*#__PURE__*/React.createElement(RemovableTag, {
    text: "removable tag",
    testId: "test-tag",
    isRemovable: true
  });
};
var interactionTasks = [{
  name: 'RemovableTag',
  description: 'Render a tag and then remove it',
  run: function () {
    var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
      var container, button;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              container = _ref.container;
              _context.next = 3;
              return findByText(container, 'removable tag', undefined, {
                timeout: 2000
              });

            case 3:
              button = getByTestId(container, 'close-button-test-tag');
              fireEvent.click(button);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function run(_x) {
      return _run.apply(this, arguments);
    }

    return run;
  }()
}];
removableTag.story = {
  name: 'RemovableTag',
  parameters: {
    performance: {
      interactions: interactionTasks
    }
  }
};