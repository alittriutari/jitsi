import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
import { forwardRef, memo, useMemo } from 'react';
import { jsx } from '@emotion/core';
import GlobalTheme from '@atlaskit/theme/components';
import { getThemeColors } from '../../../theme';
import BaseTag from '../shared/base';
import Before from '../shared/before';
import Content from '../shared/content';
import { chromeLinkStyles, chromeStyles, roundedBorderStyles } from '../shared/styles';
var InnerSimpleTag = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      _props$elemBefore = props.elemBefore,
      elemBefore = _props$elemBefore === void 0 ? null : _props$elemBefore,
      _props$color = props.color,
      color = _props$color === void 0 ? 'standard' : _props$color,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'light' : _props$mode,
      href = props.href,
      testId = props.testId;
  var isRounded = appearance === 'rounded';
  var isLink = Boolean(href);

  var _useMemo = useMemo(function () {
    return getThemeColors(color, mode);
  }, [color, mode]),
      chromeColors = _useMemo.chromeColors,
      chromeLinkColors = _useMemo.chromeLinkColors,
      linkHoverColor = _useMemo.linkHoverColor;

  var chromeContainerForLinkStyles = [chromeLinkStyles(chromeLinkColors), isRounded ? roundedBorderStyles : undefined];
  var chromeContainerStyles = [chromeStyles(_objectSpread({}, chromeColors)), isRounded ? roundedBorderStyles : undefined];
  var content = jsx(Content, _extends({}, props, {
    isRemovable: false,
    isLink: isLink,
    isRounded: isRounded,
    linkHoverColor: linkHoverColor
  }));
  var tagCss = [].concat(chromeContainerStyles, [isLink ? chromeContainerForLinkStyles : undefined]);
  return jsx(BaseTag, {
    ref: ref,
    testId: testId,
    tagCss: tagCss,
    role: isLink ? 'link' : undefined,
    before: jsx(Before, {
      isRounded: isRounded,
      elemBefore: elemBefore
    }),
    contentElement: content
  });
});
var SimpleTag = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {
  return jsx(GlobalTheme.Consumer, null, function (tokens) {
    return jsx(InnerSimpleTag, _extends({}, props, {
      mode: tokens.mode,
      ref: ref
    }));
  });
}));
export default SimpleTag;