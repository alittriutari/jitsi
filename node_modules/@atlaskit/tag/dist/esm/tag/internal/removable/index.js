import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
import { forwardRef, memo, useCallback, useMemo, useState } from 'react';
import { jsx } from '@emotion/core';
import { useCallbackWithAnalytics } from '@atlaskit/analytics-next';
import EditorCloseIcon from '@atlaskit/icon/glyph/editor/close';
import { ExitingPersistence, ShrinkOut } from '@atlaskit/motion';
import GlobalTheme from '@atlaskit/theme/components';
import { getThemeColors } from '../../../theme'; // eslint-disable-next-line import/order

import { name as packageName, version as packageVersion } from '../../../version.json';
import BaseTag from '../shared/base';
import Before from '../shared/before';
import Content from '../shared/content';
import { chromeLinkStyles, chromeStyles, roundedBorderStyles } from '../shared/styles';
import { mergeRefs } from '../shared/utils';
import { removeButtonStyles } from './styles';

var defaultBeforeRemoveAction = function defaultBeforeRemoveAction() {
  return true;
};

var noop = function noop() {};

var TagStatus;

(function (TagStatus) {
  TagStatus["Showing"] = "showing";
  TagStatus["Removing"] = "removing";
  TagStatus["Removed"] = "removed";
})(TagStatus || (TagStatus = {}));

var InnerRemovableTag = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useState = useState(TagStatus.Showing),
      _useState2 = _slicedToArray(_useState, 2),
      status = _useState2[0],
      setStatus = _useState2[1];

  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,
      _props$elemBefore = props.elemBefore,
      elemBefore = _props$elemBefore === void 0 ? null : _props$elemBefore,
      _props$isRemovable = props.isRemovable,
      isRemovable = _props$isRemovable === void 0 ? true : _props$isRemovable,
      _props$text = props.text,
      text = _props$text === void 0 ? '' : _props$text,
      _props$color = props.color,
      color = _props$color === void 0 ? 'standard' : _props$color,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'light' : _props$mode,
      href = props.href,
      removeButtonLabel = props.removeButtonLabel,
      testId = props.testId,
      _props$onBeforeRemove = props.onBeforeRemoveAction,
      onBeforeRemoveAction = _props$onBeforeRemove === void 0 ? defaultBeforeRemoveAction : _props$onBeforeRemove,
      _props$onAfterRemoveA = props.onAfterRemoveAction,
      onAfterRemoveAction = _props$onAfterRemoveA === void 0 ? noop : _props$onAfterRemoveA;
  var isRounded = appearance === 'rounded';
  var isLink = Boolean(href);
  var onAfterRemoveActionWithAnalytics = useCallbackWithAnalytics(onAfterRemoveAction, {
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName: packageName,
      packageVersion: packageVersion
    }
  }, 'atlaskit');
  var handleRemoveComplete = useCallback(function () {
    onAfterRemoveActionWithAnalytics(text);
    setStatus(TagStatus.Removed);
  }, [onAfterRemoveActionWithAnalytics, text]);
  var handleRemoveRequest = useCallback(function () {
    if (onBeforeRemoveAction && onBeforeRemoveAction()) {
      handleRemoveComplete();
    }
  }, [handleRemoveComplete, onBeforeRemoveAction]);
  var onKeyPress = useCallback(function (e) {
    var spacebarOrEnter = e.key === ' ' || e.key === 'Enter';

    if (spacebarOrEnter) {
      e.stopPropagation();
      handleRemoveRequest();
    }
  }, [handleRemoveRequest]);
  var removingTag = useCallback(function () {
    return setStatus(TagStatus.Removing);
  }, []);
  var showingTag = useCallback(function () {
    return setStatus(TagStatus.Showing);
  }, []);

  var _useMemo = useMemo(function () {
    return getThemeColors(color, mode);
  }, [color, mode]),
      chromeColors = _useMemo.chromeColors,
      chromeLinkColors = _useMemo.chromeLinkColors,
      buttonColors = _useMemo.buttonColors,
      linkHoverColor = _useMemo.linkHoverColor;

  var chromeContainerForLinkStyles = [chromeLinkStyles(chromeLinkColors), isRounded ? roundedBorderStyles : undefined];
  var chromeContainerStyles = [chromeStyles(_objectSpread({}, chromeColors)), isRounded ? roundedBorderStyles : undefined];
  var removeButton = isRemovable ? jsx("button", {
    css: [removeButtonStyles(_objectSpread({}, buttonColors)), isRounded ? roundedBorderStyles : undefined],
    tabIndex: 0,
    "aria-label": removeButtonLabel,
    onClick: handleRemoveRequest,
    onFocus: removingTag,
    onBlur: showingTag,
    onKeyPress: onKeyPress,
    type: "button",
    "data-testid": "close-button-".concat(testId)
  }, jsx(EditorCloseIcon, {
    label: "close tag",
    size: "small"
  })) : undefined;
  var tagCss = [].concat(chromeContainerStyles, [isLink ? chromeContainerForLinkStyles : undefined]);
  var content = jsx(Content, _extends({}, props, {
    isRemovable: isRemovable,
    isLink: isLink,
    isRounded: isRounded,
    linkHoverColor: linkHoverColor
  }));
  return jsx(ExitingPersistence, null, !(status === TagStatus.Removed) && jsx(ShrinkOut, null, function (motion) {
    return jsx(BaseTag, {
      ref: mergeRefs(motion.ref, ref),
      testId: testId,
      tagCss: tagCss,
      "data-removable": true,
      "data-removing": status === TagStatus.Removing,
      role: isLink ? 'link' : undefined,
      before: jsx(Before, {
        isRounded: isRounded,
        elemBefore: elemBefore
      }),
      contentElement: content,
      after: removeButton
    });
  }));
});
var RemovableTag = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {
  return jsx(GlobalTheme.Consumer, null, function (tokens) {
    return jsx(InnerRemovableTag, _extends({}, props, {
      mode: tokens.mode,
      ref: ref
    }));
  });
}));
export default RemovableTag;