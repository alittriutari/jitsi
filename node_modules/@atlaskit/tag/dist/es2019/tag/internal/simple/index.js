import _extends from "@babel/runtime/helpers/extends";

/** @jsx jsx */
import { forwardRef, memo, useMemo } from 'react';
import { jsx } from '@emotion/core';
import GlobalTheme from '@atlaskit/theme/components';
import { getThemeColors } from '../../../theme';
import BaseTag from '../shared/base';
import Before from '../shared/before';
import Content from '../shared/content';
import { chromeLinkStyles, chromeStyles, roundedBorderStyles } from '../shared/styles';
const InnerSimpleTag = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    appearance = 'default',
    elemBefore = null,
    color = 'standard',
    mode = 'light',
    href,
    testId
  } = props;
  const isRounded = appearance === 'rounded';
  const isLink = Boolean(href);
  const {
    chromeColors,
    chromeLinkColors,
    linkHoverColor
  } = useMemo(() => getThemeColors(color, mode), [color, mode]);
  const chromeContainerForLinkStyles = [chromeLinkStyles(chromeLinkColors), isRounded ? roundedBorderStyles : undefined];
  const chromeContainerStyles = [chromeStyles({ ...chromeColors
  }), isRounded ? roundedBorderStyles : undefined];
  const content = jsx(Content, _extends({}, props, {
    isRemovable: false,
    isLink: isLink,
    isRounded: isRounded,
    linkHoverColor: linkHoverColor
  }));
  const tagCss = [...chromeContainerStyles, isLink ? chromeContainerForLinkStyles : undefined];
  return jsx(BaseTag, {
    ref: ref,
    testId: testId,
    tagCss: tagCss,
    role: isLink ? 'link' : undefined,
    before: jsx(Before, {
      isRounded: isRounded,
      elemBefore: elemBefore
    }),
    contentElement: content
  });
});
const SimpleTag = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, ref) => {
  return jsx(GlobalTheme.Consumer, null, tokens => {
    return jsx(InnerSimpleTag, _extends({}, props, {
      mode: tokens.mode,
      ref: ref
    }));
  });
}));
export default SimpleTag;