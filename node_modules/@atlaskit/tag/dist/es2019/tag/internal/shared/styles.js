import { buttonWidthUnitless, defaultBorderRadius, defaultMargin, defaultRoundedBorderRadius, defaultTextPadding, maxTextWidth, maxTextWidthUnitless, tagHeight, textFontSize, textPaddingLeft, textPaddingRight } from '../../../constants';
export const roundedBorderStyles = {
  borderRadius: `${defaultRoundedBorderRadius}`
};
export const beforeElementStyles = {
  position: 'absolute',
  left: 0,
  borderRadius: `${defaultBorderRadius}`,
  alignItems: 'center',
  display: 'flex',
  justifyContent: 'center'
};
export const chromeStyles = ({
  backgroundColor,
  backgroundColorHover,
  textColor,
  textColorHover
}) => ({
  backgroundColor: backgroundColor,
  color: textColor,
  '&:hover': {
    backgroundColor: backgroundColorHover,
    color: textColorHover
  },
  '& button:hover': {
    backgroundColor: backgroundColor,
    color: textColor
  },
  '&>span:hover': {
    backgroundColor: backgroundColor,
    color: textColor
  },
  borderRadius: `${defaultBorderRadius}`,
  cursor: 'default',
  display: 'inline-flex',
  position: 'relative',
  height: `${tagHeight}`,
  lineHeight: 1,
  margin: `${defaultMargin}`,
  padding: 0,
  overflow: 'hidden'
});
export const chromeLinkStyles = ({
  hoverBackgroundColor,
  hoverTextColor,
  hoverBackgroundColorRemoval,
  hoverTextColorRemoval,
  focusRingColor
}) => ({
  '&>a:hover': {
    backgroundColor: hoverBackgroundColor,
    color: hoverTextColor
  },
  '&[data-removable="true"]:hover': {
    backgroundColor: hoverBackgroundColorRemoval,
    color: hoverTextColorRemoval
  },
  '&:focus-within': {
    boxShadow: `0 0 0 2px ${focusRingColor}`,
    outline: 'none'
  },
  '&[data-removing="true"]:focus-within': {
    boxShadow: `0 0 0 2px transparent`,
    outline: 'none'
  }
});
export const hasAfterStyles = {
  paddingRight: `${textPaddingRight}`,
  maxWidth: `${maxTextWidthUnitless - buttonWidthUnitless}px`
};
export const hasBeforeStyles = {
  paddingLeft: `${textPaddingLeft}`
};
export const textStyles = {
  fontSize: textFontSize,
  fontWeight: 'normal',
  lineHeight: 1,
  paddingLeft: defaultTextPadding,
  paddingRight: defaultTextPadding,
  paddingTop: '2px',
  paddingBottom: '2px',
  borderRadius: defaultBorderRadius,
  maxWidth: maxTextWidth,
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
};
export const linkStyles = linkHoverColor => ({ ...textStyles,
  ':not([data-color="standard"])': {
    color: 'inherit',
    textDecoration: 'underline'
  },
  textDecoration: 'none',
  '&:hover': {
    color: linkHoverColor
  },
  '&:focus': {
    outline: 'none'
  }
});