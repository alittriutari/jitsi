import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import Div from './styled';
import { name as packageName, version as packageVersion } from './version.json';

var Blanket = /*#__PURE__*/function (_React$Component) {
  _inherits(Blanket, _React$Component);

  var _super = _createSuper(Blanket);

  function Blanket() {
    _classCallCheck(this, Blanket);

    return _super.apply(this, arguments);
  }

  _createClass(Blanket, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          canClickThrough = _this$props.canClickThrough,
          isTinted = _this$props.isTinted,
          onBlanketClicked = _this$props.onBlanketClicked;
      var onClick = canClickThrough ? undefined : onBlanketClicked;
      var containerProps = {
        canClickThrough: canClickThrough,
        isTinted: isTinted,
        onClick: onClick
      };
      return /*#__PURE__*/React.createElement(Div, containerProps);
    }
  }]);

  return Blanket;
}(React.Component);

_defineProperty(Blanket, "defaultProps", {
  canClickThrough: false,
  isTinted: false,
  onBlanketClicked: function onBlanketClicked() {}
});

export { Blanket as BlanketWithoutAnalytics };
var createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
  componentName: 'blanket',
  packageName: packageName,
  packageVersion: packageVersion
})(withAnalyticsEvents({
  onBlanketClicked: createAndFireEventOnAtlaskit({
    action: 'clicked',
    actionSubject: 'blanket',
    attributes: {
      componentName: 'blanket',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(Blanket));